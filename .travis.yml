dist: focal
languages: 
  - cpp
  - python
branches:
  only:
    - master
env:
  global:
    - /usr/local/bin:$PATH
python:
  - "3.8"

matrix:
  include:
    - compiler: gcc
      addons:
       apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-9', 'libpq-dev']
      env: 
        - CXX=g++-9
        - GCC=9
        - BUILD_TYPE=Release
    - compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-focal-9.0
          packages:
            - clang-9
            - cmake
      env: 
        - COMPILER=clang 
        - CLANG=9
        - BUILD_TYPE=Release
    - compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-9', 'libpq-dev']
      env:
          - CXX=g++-9
          - CXXFLAGS="-O0 --coverage"
          - BUILD_TYPE=Coverage
          - GCC=9
      #before_install:
        
      # script:
      #   - ./configure --enable-gcov && make && make check
      # after_success:
      #   - coveralls --exclude nrt --gcov-options '\-lp' nrt
env:
  global:
    - POUTRE_CMAKE_GENERATOR="Ninja"
before_install:
    - pip install --user cpp-coveralls
    - sudo apt-get update
    # Boost and ninja build
    - sudo apt-get install -qq libboost-all-dev ninja-build
    # cppcheck
    - sudo apt-get install -qq cppcheck
    #doc
    - sudo apt-get install -qq doxygen graphviz
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      fi
install:
  - pip install -r requirements.txt
script:
  - mkdir -p build
  - cd build
  - cmake "$POUTRE_CMAKE_EXTRA_ARGS" -DBUILD_SHARED_LIBS=ON -DPOUTRE_BUILD_TEST=ON -DPOUTRE_BUILD_BENCH=ON $POUTRE_CMAKE_EXTRA_ARGS -DCMAKE_BUILD_TYPE=${BUILD_TYPE} ..
  - cmake --build .
  - ctest . --output-on-failure
  # cppcheck
  - cppcheck -f --std=c++20 --inline-suppr -ibuild -ithirdparties -ibench --quiet --error-exitcode=1 .
# see https://github.com/richelbilderbeek/travis_cpp_tutorial/blob/master/travis_cpp_tutorial.pdf
after_success:
  - bash <(curl -s https://codecov.io/bash)
  - if [ "${BUILD_TYPE}" == "Coverage" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
      coveralls --include src --exclude thirdparties --gcov-options '\-lp' --root .. --build-root .;
    fi


notifications:
  email:
    recipients:
      - thomas.retornaz@mines-paris.org
    on_success: change
    on_failure: always
